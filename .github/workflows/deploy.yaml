name: Lint, Version, Build & Deploy to GitHub Pages

# Trigger workflow on push to main branch
on:
  push:
    branches: [ "main" ]

# Permissions required for this workflow
permissions:
  contents: write   # needed to push version tags

jobs:

  # ----------------------
  # Job 1: Lint
  # ----------------------
  lint:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Step 3: Cache npm dependencies for speed
      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 5: Run ESLint to check for errors
      - name: Run ESLint
        run: npm run lint

  # ----------------------
  # Job 2: Versioning (Daily CalVer)
  # ----------------------
  version:
    runs-on: ubuntu-latest
    needs: lint    # Run only if lint passes
    steps:
      # Step 1: Checkout repo with full history to fetch tags
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Configure Git
      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Step 3: Generate daily version
      - name: Generate daily CalVer version
        id: calver
        run: |
          # Get current date in YYYY.MM.DD format
          DATE=$(date +'%Y.%m.%d')
          
          # Find last tag for today
          LAST_TAG=$(git tag --list "v$DATE.*" --sort=-v:refname | head -n1)

          if [ -z "$LAST_TAG" ]; then
            SUFFIX=0               # First deploy today
          else
            SUFFIX=$(echo $LAST_TAG | awk -F. '{print $4}')
            SUFFIX=$((SUFFIX + 1)) # Increment for additional deploys today
          fi

          # Combine date + suffix â†’ YYYY.MM.DD.XX
          NEW_VERSION="$DATE.$(printf "%02d" $SUFFIX)"
          echo "New version: $NEW_VERSION"

          # Update package.json version using jq
          jq --arg v "$NEW_VERSION" '.version=$v' package.json > tmp.json && mv tmp.json package.json

          # Commit updated version
          git add package.json
          git commit -m "chore(release): $NEW_VERSION [skip ci]" || echo "No changes to commit"

          # Create Git tag and push
          git tag "v$NEW_VERSION"
          git push --follow-tags origin main

          # Output version for downstream jobs
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

  # ----------------------
  # Job 3: Build & Deploy
  # ----------------------
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: version   # Run only if versioning succeeds
    steps:
      # Step 1: Checkout repository including version changes
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Step 3: Cache npm dependencies for speed
      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 5: Build project with Parcel
      - name: Build with Parcel
        run: npm run build

      # Step 6: Debug: list dist folder
      - name: List dist files (debug)
        run: ls -R dist

      # Step 7: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Required for automatic push
          publish_dir: ./dist                        # Folder to deploy
          force_orphan: true                         # Clears old files
          commit_message: "Deploy site from GitHub Actions"
